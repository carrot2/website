<?xml version="1.0" encoding="UTF-8" ?>

<project name="Carrot2 Website build/ publish script." default="help" basedir="." >

  <property name="website.src" value="src" />
  <property name="stylesheet" location="${website.src}/xsl/page.xsl" />

  <property name="website.properties" location="website.properties" />
  <property file="${website.properties}" />

  <property file="etc/common.properties" />

  <property name="distribution.dir" value="tmp/dist" />

  <property name="website.website.upload.dir" value="project.carrot2.org" />

  <target name="clean" description="Removes all temporary files.">
        <delete failonerror="false" includeemptydirs="true" quiet="true">
            <fileset dir="tmp" />
        </delete>
  </target>

  <property name="stable.git.repo" location="tmp/repositories/carrot2.stable" />
  <property name="master.git.repo" location="tmp/repositories/carrot2.master" />

  <target name="git.check">
    <condition property="git.cloned">
      <available file="${stable.git.repo}" type="dir"/>
    </condition>
  </target>

  <presetdef name="git">
    <exec executable="git" failifexecutionfails="true" failonerror="true" vmlauncher="false" />
  </presetdef>

  <target name="git.clone" unless="git.cloned">
    <mkdir dir="${stable.git.repo}" />
    <git dir="${stable.git.repo}">
       <arg line="clone --no-checkout --depth 1 git://github.com/carrot2/carrot2.git ." />
     </git>
    <git dir="${stable.git.repo}">
       <arg line="checkout stable" />
     </git>

    <mkdir dir="${master.git.repo}" />
    <git dir="${master.git.repo}">
       <arg line="clone --no-checkout --depth 1 git://github.com/carrot2/carrot2.git ." />
     </git>
    <git dir="${master.git.repo}">
       <arg line="checkout master" />
     </git>
  </target>

  <target name="git.pull" depends="git.check, git.clone">
    <git dir="${stable.git.repo}"> 
       <arg line="pull" />
    </git>
    <git dir="${master.git.repo}">
       <arg line="pull" />
    </git>

    <!-- Load properties. -->
    <property file="${stable.git.repo}/etc/version/carrot2.version" />
    <property file="${master.git.repo}/etc/version/carrot2.version" />
    <property file="${master.git.repo}/etc/version/carrot2.basenames" />
  </target>
  
  <target name="xslt" depends="git.pull" description="Transforms the website XML sources to HTML files">
      <fail unless="carrot2.version.stable" />
      <fail unless="carrot2.version.head" />

      <tstamp>
          <format property="build.time" pattern="d MMMM yyyy" locale="en" />
      </tstamp>
      <tstamp>
          <format property="copyright.year" pattern="yyyy" locale="en" />
      </tstamp>

      <xslt basedir="${website.src}" destdir="${distribution.dir}" style="${stylesheet}">
          <include name="*.xml" />

          <outputproperty name="method" value="xml" />
          <outputproperty name="standalone" value="yes"/>
          <outputproperty name="encoding" value="UTF-8"/>
          <outputproperty name="indent" value="no" />

          <param name="content-extension" expression="html" />
          <param name="build.time" expression="${build.time}" />
          <param name="copyright.year" expression="${copyright.year}" />
        
          <param name="carrot2.java-api.base" expression="${carrot2.java-api.base}" />
          <param name="carrot2.csharp-api.base" expression="${carrot2.csharp-api.base}" />
          <param name="carrot2.cli.base" expression="${carrot2.cli.base}" />
          <param name="carrot2.dcs.base" expression="${carrot2.dcs.base}" />
          <param name="carrot2.solr-compat.base" expression="${carrot2.solr-compat.base}" />
          <param name="carrot2.webapp.base" expression="${carrot2.webapp.base}" />
          <param name="carrot2.manual.base" expression="${carrot2.manual.base}" />
          <param name="carrot2.workbench.base" expression="${carrot2.workbench.base}" />
        
          <param name="carrot2.version.stable" expression="${carrot2.version.stable}" />
          <param name="carrot2.version.head" expression="${carrot2.version.head}" />

          <param name="stable.dist.url" expression="${stable.dist.url}" />
          <param name="stable.webapp.url" expression="${stable.webapp.url}" />
          <param name="head.dist.url" expression="${head.dist.url}" />
          <param name="head.webapp.url" expression="${head.webapp.url}" />
      </xslt>
      
      <copy todir="${distribution.dir}" filtering="false">
          <fileset dir="${website.src}">
              <exclude name="**/*.bat" />
              <exclude name="**/*.sh" />
              <exclude name="**/*.swp" />
              <exclude name="*.xml" />
              <exclude name="**/*.xsl" />
              <exclude name="xsl/**" />
              <exclude name="xml/**" />
              <exclude name="img-src/**" />
              <exclude name="**/favicon.ico" />
          </fileset>
          <fileset dir="${website.src}/img">
            <include name="favicon.ico" />
          </fileset>
      </copy>
  </target>

  <target name="upload" depends="xslt" description="Uploads the website to the server">
      <fail unless="upload.host" />
      <fail unless="upload.user" />
      <fail unless="upload.path" />
      <fail unless="upload.ssh.identity.path" />
     
      <property name="upload.rsync.command" value="rsync" />
      <property name="upload.ssh.port" value="22" />

      <exec executable="${upload.rsync.command}" dir="${distribution.dir}" failonerror="true">
           <arg value="-az" />
           <arg value="-v" />
           <arg value="-e" />
           <arg value="ssh -p ${upload.ssh.port} -o StrictHostKeyChecking=no -i ${upload.ssh.identity.path} -o UserKnownHostsFile=/dev/null" />
           <arg value="--chmod=u=rwX,g=rX,o=rX" />
           <arg value="." />
           <arg value="${upload.user}@${upload.host}:${upload.path}" />
      </exec>
  </target>

  <target name="help" description="Displays help on available targets.">
    <echo>

    Current JDK: ${ant.java.version}
    Basedir    : ${basedir}
    -----------------------------------------------------

    Type ant -projecthelp for more information about available tasks.
    
    </echo>
  </target>
  <!-- }}} -->

</project>

