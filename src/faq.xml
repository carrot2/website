<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet href="xsl/page.xsl" type="text/xsl" ?>

<page section="faq">
  <heading>FAQ</heading>

  <content>
    <faqs>
    <faq id="commercial">
      <question>Can I use Carrot<sup>2</sup> in a commercial project?</question>
      <answer>
        Yes. The only requirement is that you properly acknowledge the use of
        Carrot<sup>2</sup> (on the project's website and documentation) and let
        us know about your project. Please also remember to read the <a
        content="license">license</a>.
      </answer>
    </faq>

    <faq id="acknowledging">
      <question>How can I acknowledge the use of Carrot<sup>2</sup> on my site?</question>
      <answer>
        Please put a statement equivalent to "This product includes software
        developed by the Carrot2 Project." on our site and link it to
        Carrot<sup>2</sup>'s website at <a
        href="http://www.carrot2.org">http://www.carrot2.org</a>. Additionally,
        you can use some of our <a content="acknowledging">powered-by logos</a>
        if you like.
      </answer>
    </faq>

    <faq id="crawling">
      <question>Can Carrot<sup>2</sup> crawl my website?</question>
      <answer>
        No. Carrot<sup>2</sup> can add clustering of search results to an
        existing search engine. You can use an Open Source project called <a
        href="http://www.nutch.org">Nutch</a> to crawl your website. Nutch has
        a Carrot<sup>2</sup>-based search clustering plugin, so you'll get all
        crawling, searching and clustering in one piece. If you need help
        with any of these, please <a content="support">contact us</a>.
      </answer>
    </faq>

    <faq id="compiling">
      <question>How do I compile Carrot<sup>2</sup> source code?</question>
      <answer>
        <ol>
          <li>
            In order to compile Carrot<sup>2</sup> you will need <a
            href="http://java.sun.com/javase/downloads/index.jsp">Java Software
            Developer Kit</a> in version 1.4.2 or newer and <a
            href="http://ant.apache.org/">Apache Ant</a>.
          </li>
          <li>
            Check out Carrot<sup>2</sup> source code from the SVN repository:

            <div class="cmd-line">
              svn co https://svn.sourceforge.net/svnroot/carrot2/trunk carrot2
            </div>
          </li>

          <li>
            To build all Carrot<sup>2</sup> components, go to the
            <tt>trunk/carrot2</tt> directory and run:

            <div class="cmd-line">
              ant build
            </div>
          </li>

          <li>
            To build only one application, go to its directory (e.g.
            <tt>trunk/carrot2/applications/carrot2-demo-dcs</tt>) run Ant with
            the default target:

            <div class="cmd-line">
              ant build
            </div>

            In the application's <tt>tmp/dist</tt> directory you'll find the
            compiled application. Please refer to the application's specific
            <tt>readme.txt</tt> files for instructions on how to run the
            application.
          </li>
        </ol>
      </answer>
    </faq>
    
    <faq id="integration">
      <question>How can I integrate Carrot<sup>2</sup> with my Web site/ software?</question>
      <answer>
        <p>
        Such an integration depends on what existing infrastructure is already available in your project. Carrot<sup>2</sup>
        requires a <emph>feed</emph> of documents (search results), so typically you'll need a search engine
        that crawls your site. Such an engine can be indeed local to your Web site (proprietary solutions in intranets, 
        search engines built on top of <a href="http://lucene.apache.org/nutch/">Nutch</a> or <a href="http://www.htdig.org/">ht://dig</a>),
        but it can as well be a global search engine with searches restricted to your domain (Google, Yahoo).
        </p>
        
        <p>
        Once a search engine is available, the integration depends on the
        technology your site/ software uses for rendering the user interface
        (or more accurately: for implementing application logic). Software
        written in Java can use Carrot<sup>2</sup> directly in a way that is
        shown in the end-to-end <carrot2-source-link extension="/applications/carrot2-demo-api-example/src/org/carrot2/apiexample/Example.java">example
        code</carrot2-source-link> (<carrot2-api-link extension="/org/carrot2/apiexample/Example.html">JavaDoc</carrot2-api-link>).
        Sites written in Perl, PHP, .NET and other languages can use the
        <c2 /> Document Clustering Server, for more details see the <a href="#non-java-integration">dedicated FAQ</a>.
        Finally, in some cases you might want to re-use and
        customize (through XSLT) some bits of Carrot<sup>2</sup>'s <carrot2-webapp-link>web
        application</carrot2-webapp-link> (located in the <carrot2-source-link dir="true" extension="/applications/carrot2-demo-webapp/"><span
        class="c2element">carrot2/applications/carrot2-demo-webapp</span></carrot2-source-link>
        folder of the source repository) to e.g. visualize clusters.
        </p>
        
        <p>
        Note that Carrot<sup>2</sup> integration requires some Java development
        skills and familiarity with Java development tools (Eclipse, Apache
        ANT). The example code and JUnit tests available in the open source project demonstrate
        various ways of using Carrot<sup>2</sup>. The project's <a
        href="http://lists.sourceforge.net/lists/listinfo/carrot2-developers">mailing
        list</a> can also be of some help if you get stuck someplace.
        We have also prepared a step-by-step example of using the Carrot<sup>2</sup> API directly, it is
        available in the <a href="https://svn.sourceforge.net/svnroot/carrot2/trunk/carrot2/applications/carrot2-demo-api-example/src/org/carrot2/apiexample/Example.java">source code repository</a>.
        </p>
        
        <p>If you'd rather pay for having the integration done quickly and professionally, <a href="http://www.carrot-search.com">Carrot Search</a>
        provides consulting services (paid approximately 60 EUR per hour).
        </p>
      </answer>
    </faq>
    
    <faq id="non-java-integration">
      <question>How can I integrate Carrot<sup>2</sup> with non-Java software?</question>
      <answer>
        <p>
        Although <c2 /> does not have native ports on non-Java platforms, such
        as .NET, PHP, Ruby, Perl etc., it can be easily integrated with them
        using the <c2 /> Document Clustering Server (DCS). The DCS exposes <c2
        /> clustering as an HTTP/REST service. Essentially, you make an
        HTTP/POST request with an XML containing the documents you want to have
        clustered and the DCS responds with an XML containing the clusters
        created by Carrot2. For quick integration with Ruby, A JSON output
        format is also available. Finally, for batch processing, a simple
        command-line application is provided.
        </p>

        <p>
        As the DCS is still at the development phase, you'll need to <a
        href="#compiling">check out the source code and build it</a> on your
        own. The source code of the DCS is located in the <tt>trunk/ carrot2/
        applications/ carrot2-demo-dcs</tt> directory. See the <tt>readme.txt</tt> located
        in that directory for further instructions.
        </p>
      </answer>
    </faq>
    
    <faq id="lucene-integration">
      <question>How can I integrate Carrot<sup>2</sup> with my Lucene-based application?</question>
      <answer>
        You can use Carrot<sup>2</sup>'s built-in <carrot2-api-link
        extension="/org/carrot2/input/lucene/package-summary.html">Lucene input
        component</carrot2-api-link> as shown in this well-commented
        <carrot2-source-link extension="/applications/carrot2-demo-api-example/src/org/carrot2/apiexample/LuceneExample.java">example code</carrot2-source-link> (<carrot2-api-link extension="/org/carrot2/apiexample/LuceneExample.html">JavaDoc</carrot2-api-link>).
      </answer>
    </faq>
    
    <faq id="running-in-eclipse">
      <question>How can I run Carrot<sup>2</sup> demo browser from Eclipse?</question>
      <answer>
        To run Carrot<sup>2</sup> Demo Browser directly from Eclipse, please follow these steps:

        <ol>
          <li>
            Check out Carrot<sup>2</sup> source code from the SVN repository:

            <div class="cmd-line">
              svn co https://svn.sourceforge.net/svnroot/carrot2/trunk carrot2
            </div>
          </li>

          <li>
            <img src="img/eclipse-import.gif" style="float: right; margin-bottom: 10px" class="pic" />
            Import all Carrot<sup>2</sup> projects into your workspace:

            <ol>
              <li>
                From the Package Explorer's context menu choose <span class="gui-label">Import...</span>
              </li>

              <li>
                In the first step of the Import wizard, choose <span
                class="gui-label">General -> Existing projects into
                Workspace</span> and click <span class="gui-label">Next</span>.
              </li>

              <li>
                In the next step of the wizard, in the <span
                class="gui-label">Select root directory</span> field provide
                the path to your local Carrot<sup>2</sup> checkout and click
                <span class="gui-label">Finish</span>.
              </li>
            </ol>
          </li>

          <li style="clear: both">
            <img src="img/eclipse-classpath-variables.gif" style="float: right; margin-bottom: 10px" class="pic" />

            The Eclipse compile process will fail because of undefined
            classpath variables: <tt>ANT_HOME</tt> and
            <tt>CARROT2_CHECKOUT_BASE</tt>. To define these variables open the
            Preferences window (<span class="gui-label">Window ->
            Preferences...</span>) and then go to (<span class="gui-label">Java
            -> Build Path -> Classpath variables</span>). Make the
            <tt>ANT_HOME</tt> variable point to your local Ant installation and
            <tt>CARROT2_CHECKOUT_BASE</tt> to your local Carrot<sup>2</sup>
            repository checkout.
          </li>

          <li style="clear: both">
            Clean all projects (<span class="gui-label">Project ->
            Clean...</span>) and let Eclipse compile everything again, this
            time without errors.
          </li>

          <li>
            <img src="img/eclipse-launch.gif" style="float: right; margin-bottom: 10px" class="pic"
            /> Run Carrot<sup>2</sup> browser using the <span
            class="gui-label">Run...</span> toolbar icon (Eclipse should have
            automatically created the appropriate launch entry during project
            import).
          </li>
        </ol>
      </answer>
    </faq>
    
    <faq id="lucene-in-demo-browser">
      <question>How do I configure the Lucene input in Carrot<sup>2</sup> Tuning Browser?</question>
      <answer>
        To feed the Carrot<sup>2</sup> Demo Browser directly from a local Lucene index follow these steps:

        <ol>
          <li>
            Run the Carrot<sup>2</sup> Demo Browser.
          </li>

          <li>
            In the <span class="gui-label">Process</span> combo box select
            <span class="gui-label">Lucene Index -- Lingo Classic
            Clusterer</span>.
          </li>

          <li>
            <img src="img/lucene-index-settings.png" style="float: right; margin-bottom: 10px" class="pic" />
            Click the <span class="gui-label">Settings</span> button and then
            the <span class="gui-label">Edit</span> button in the <span
            class="gui-label">Lucene index location</span> section.

            <ol>
              <li>
                In the file browser, provide the path to your Lucene
                index directory. A dialog for configuring the index will appear.
              </li>

              <li>
                In the <span class="gui-label">Search fields</span> section,
                select the Lucene fields to be searched (hold down Ctrl key for
                multiple selections).
              </li>

              <li>
                In the <span class="gui-label">Results fields</span> section,
                select which Lucene fields should be mapped to the URL,
                document title and document snippet.
              </li>

              <li>
                Finally, in the <span class="gui-label">Analyzer</span>
                section, choose the analyzer to be used.
              </li>

              <li>
                Click the <span class="gui-label">OK</span> buttons in the
                index configuration and process configuration dialogs.
              </li>
            </ol>
          </li>
        </ol>
      </answer>
    </faq>
    </faqs>
  </content>
</page>
